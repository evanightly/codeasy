name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.IMAGE_REPOSITORY_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/codeasy:latest -f docker/laravel.Dockerfile . || {
            echo "Failed to build image"
            exit 1
          }
          docker push ghcr.io/${{ github.repository_owner }}/codeasy:latest || {
            echo "Failed to push image"
            exit 1
          }

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          CR_PAT: ${{ secrets.IMAGE_REPOSITORY_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          DOCKER_CONFIG_CONTENT="{\"auths\":{\"ghcr.io\":{\"auth\":\"$(echo -n "$GITHUB_ACTOR:$CR_PAT" | base64)\"}}}"
          
          ssh $SSH_USERNAME@$SSH_HOST 'bash -s' << 'ENDSSH'
            set -e  # Exit on any error

            # Setup Docker auth non-interactively
            mkdir -p ~/.docker
            echo "$DOCKER_CONFIG_CONTENT" > ~/.docker/config.json || {
              echo "Failed to setup Docker authentication"
              exit 1
            }

            # Navigate to home directory first
            cd ~

            # Check and handle repository
            if [ ! -d "codeasy" ]; then
              echo "First time deployment - Cloning repository..."
              git clone https://github.com/evanightly/codeasy.git
            fi

            # Always navigate to project directory and update
            cd codeasy
            echo "Updating repository..."
            git fetch --all
            git reset --hard origin/main

            # Ensure directories exist and set permissions
            mkdir -p laravel/storage/{app,framework,logs}
            mkdir -p laravel/storage/framework/{cache,sessions,views}
            chmod -R 775 laravel/storage || {
              echo "Failed to set storage permissions"
              exit 1
            }

            # Copy production env
            echo "${{ secrets.PRODUCTION_ENV }}" > laravel/.env || {
              echo "Failed to create .env file"
              exit 1
            }

            # Stop any running containers
            if [ -f "docker-compose.yml" ]; then
              docker compose down || echo "Warning: Failed to stop containers"
            fi

            # Pull and start containers
            echo "Pulling latest images..."
            docker compose pull || {
              echo "Failed to pull images"
              exit 1
            }

            echo "Starting containers..."
            docker compose up -d || {
              echo "Failed to start containers"
              docker compose logs
              exit 1
            }

            # Wait for containers to be ready
            echo "Waiting for containers to be ready..."
            sleep 10

            # Check if Laravel container is running
            docker compose ps laravel | grep -q "Up" || {
              echo "Laravel container failed to start"
              docker compose logs laravel
              exit 1
            }

            # Run Laravel setup and optimization
            echo "Running Laravel setup..."
            docker compose exec -T laravel composer install --no-dev --optimize-autoloader || {
              echo "Failed to install composer dependencies"
              exit 1
            }

            docker compose exec -T laravel php artisan key:generate --force
            docker compose exec -T laravel php artisan storage:link
            docker compose exec -T laravel php artisan migrate --force || {
              echo "Failed to run migrations"
              exit 1
            }

            docker compose exec -T laravel php artisan config:cache
            docker compose exec -T laravel php artisan route:cache
            docker compose exec -T laravel php artisan view:cache || {
              echo "Failed to optimize Laravel"
              exit 1
            }

            # Build frontend assets
            echo "Building frontend assets..."
            docker compose exec -T laravel npm install || {
              echo "Failed to install npm dependencies"
              exit 1
            }

            docker compose exec -T laravel npm run build || {
              echo "Failed to build frontend assets"
              exit 1
            }

            # Set proper permissions
            chown -R www-data:www-data laravel/storage
            chown -R www-data:www-data laravel/bootstrap/cache || {
              echo "Failed to set permissions"
              exit 1
            }

            echo "Deployment completed successfully!"
          ENDSSH