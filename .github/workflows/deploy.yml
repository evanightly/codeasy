name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  codefixing:
    name: CodeFixing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./laravel

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install PHP dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run Pint Fix
        run: ./vendor/bin/pint

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './laravel/package-lock.json'

      - name: Install Node.js dependencies
        run: npm install -D

      - name: Run NPM Lint
        run: npm run lint

      - name: Run Prettier
        run: npm run prettier

      - name: Check for changes
        working-directory: .
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m 'codefixing'
            git push
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    name: Build & Push Docker Image
    needs: codefixing
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CODEASY_PROD_LARAVEL_IMAGE_PAT }}

      - name: Test GHCR Access
        run: |
          echo "Testing GHCR authentication..."
          docker pull ghcr.io/${{ github.repository_owner }}/codeasy-prod-laravel-image:latest || true

      - name: Build & Push Docker Image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/codeasy-prod-laravel-image:latest \
            -f docker/laravel.prod.Dockerfile .

          docker push ghcr.io/${{ github.repository_owner }}/codeasy-prod-laravel-image:latest

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          CR_PAT: ${{ secrets.CODEASY_PROD_LARAVEL_IMAGE_PAT }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Create the Docker config content
          DOCKER_CONFIG=$(echo -n "$GITHUB_ACTOR:$CR_PAT" | base64)
          
          # Deploy using SSH with heredoc (remove quotes from ENDSSH to allow variable expansion)
          ssh $SSH_USERNAME@$SSH_HOST bash -s << ENDSSH
            set -ex
            
            # Setup Docker authentication
            mkdir -p ~/.docker
            echo '{
              "auths": {
                "ghcr.io": {
                  "auth": "${DOCKER_CONFIG}"
                }
              }
            }' > ~/.docker/config.json
            
            chmod 600 ~/.docker/config.json

            # Verify Docker auth and config
            echo "Testing Docker configuration..."
            if ! cat ~/.docker/config.json | jq . > /dev/null 2>&1; then
              echo "Error: Invalid JSON in config file"
              cat ~/.docker/config.json
              exit 1
            fi

            # Test Docker pull
            if ! docker pull ghcr.io/$GITHUB_ACTOR/codeasy-prod-laravel-image:latest; then
              echo "Error: Failed to pull image"
              cat ~/.docker/config.json
              exit 1
            fi

            # Clone or update repository
            if [ ! -d "codeasy/.git" ]; then
              git clone https://github.com/evanightly/codeasy.git
            fi

            cd codeasy
            git fetch --all
            git reset --hard origin/main

            # Setup environment
            echo "${{ secrets.PRODUCTION_ENV }}" > laravel/.env

            # Deploy with Docker Compose
            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            # Verify deployment
            if ! docker compose -f docker-compose.prod.yml ps | grep -q "running"; then
              echo "Error: Containers failed to start"
              docker compose -f docker-compose.prod.yml logs
              exit 1
            fi

            echo "Deployment completed successfully!"
          ENDSSH