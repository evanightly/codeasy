name: Deploy to Production

on:
  push:
    branches: [ main ]  # Hanya jalankan di push ke main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Login to GHCR
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.IMAGE_REPOSITORY_TOKEN }}

      # 3. Build & push image production
      - name: Build & Push Docker Image
        run: |
          # Build pakai laravel.prod.Dockerfile
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/codeasy:latest \
            -f docker/laravel.prod.Dockerfile .
          
          # Push
          docker push ghcr.io/${{ github.repository_owner }}/codeasy:latest

      # 4. Setup SSH Agent
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 5. Add SSH Known Hosts
      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # 6. Deploy to VPS
      - name: Deploy to VPS
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          CR_PAT: ${{ secrets.IMAGE_REPOSITORY_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # (Opsional) buat config.json di server agar bisa pull GHCR private image
          # tapi jika package GHCR PUBLIC, sebetulnya tak perlu auth
          DOCKER_CONFIG_CONTENT="{\"auths\":{\"ghcr.io\":{\"auth\":\"$(echo -n \"$GITHUB_ACTOR:$CR_PAT\" | base64)\"}}}"

          # Lakukan SSH ke server
          ssh $SSH_USERNAME@$SSH_HOST 'bash -s' << 'ENDSSH'
            set -ex

            # 1. Setup docker auth (kalau image private GHCR)
            mkdir -p ~/.docker
            echo "$DOCKER_CONFIG_CONTENT" > ~/.docker/config.json

            # 2. Pastikan repo code sudah di-clone
            #    (Opsional) jika compose file disimpan di GitHub code
            if [ ! -d "~/codeasy" ]; then
              git clone https://github.com/evanightly/codeasy.git ~/codeasy
            fi

            cd ~/codeasy

            # 3. Pull latest code (opsional, kalau docker-compose.yml disimpan di repo)
            git fetch --all
            git reset --hard origin/main

            # 4. Docker Compose down / up
            #    Gunakan file docker-compose.prod.yml
            docker compose -f docker-compose.prod.yml down || echo "No containers to stop"

            docker compose -f docker-compose.prod.yml pull || {
              echo "Failed to pull images"
              exit 1
            }

            docker compose -f docker-compose.prod.yml up -d || {
              echo "Failed to start containers"
              exit 1
            }

            echo "Deployment completed!"
          ENDSSH
