name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.IMAGE_REPOSITORY_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/codeasy:latest -f docker/laravel.Dockerfile .
          docker push ghcr.io/${{ github.repository_owner }}/codeasy:latest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          ssh $SSH_USERNAME@$SSH_HOST 'bash -s' << 'ENDSSH'
            # Check if directory exists, if not clone the repository
            if [ ! -d "~/codeasy" ]; then
              echo "First time deployment - Cloning repository..."
              cd ~
              git clone https://github.com/evanightly/codeasy.git
              cd codeasy
            else
              echo "Repository exists - Pulling latest changes..."
              cd ~/codeasy
              git fetch --all
              git reset --hard origin/main
            fi

            # Ensure directories exist
            mkdir -p laravel/storage/{app,framework,logs}
            mkdir -p laravel/storage/framework/{cache,sessions,views}
            chmod -R 775 laravel/storage

            # Copy production env
            echo "${{ secrets.PRODUCTION_ENV }}" > laravel/.env

            # Stop any running containers
            if [ -f "docker-compose.yml" ]; then
              docker compose down || true
            fi

            # Build and start containers
            docker compose pull
            docker compose up -d
            docker compose up -d

            # Wait for containers to be ready
            sleep 10

            # Run Laravel setup and optimization
            docker compose exec -T laravel composer install --no-dev --optimize-autoloader
            docker compose exec -T laravel php artisan key:generate --force
            docker compose exec -T laravel php artisan storage:link
            docker compose exec -T laravel php artisan migrate --force
            docker compose exec -T laravel php artisan config:cache
            docker compose exec -T laravel php artisan route:cache
            docker compose exec -T laravel php artisan view:cache

            # Build frontend assets
            docker compose exec -T laravel npm install
            docker compose exec -T laravel npm run build

            # Set proper permissions
            chown -R www-data:www-data laravel/storage
            chown -R www-data:www-data laravel/bootstrap/cache
          ENDSSH