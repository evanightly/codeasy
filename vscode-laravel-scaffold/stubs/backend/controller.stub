<?php

namespace App\Http\Controllers;

use App\Http\Requests\{{modelName}}\Store{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Update{{modelName}}Request;
use App\Models\{{modelName}};
use App\Support\Interfaces\Services\{{modelName}}ServiceInterface;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Inertia\Response;

class {{modelName}}Controller extends Controller
{
    public function __construct(protected {{modelName}}ServiceInterface ${{modelVariable}}Service)
    {
        // Middleware can be added here
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): Response
    {
        $search = $request->only(['search', 'order', 'dir', 'page', 'pageSize']);
        
        return Inertia::render('{{modelName}}/Index', [
            '{{modelVariablePlural}}' => $this->{{modelVariable}}Service->getAllPaginated($search),
            'filters' => $search,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): Response
    {
        return Inertia::render('{{modelName}}/Create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{modelName}}Request $request): RedirectResponse
    {
        ${{modelVariable}} = $this->{{modelVariable}}Service->store($request->validated());

        return redirect()->route('{{routeName}}.index')
            ->with('message', '{{modelName}} created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show({{modelName}} ${{modelVariable}}): Response
    {
        return Inertia::render('{{modelName}}/Show', [
            '{{modelVariable}}' => ${{modelVariable}},
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{modelName}} ${{modelVariable}}): Response
    {
        return Inertia::render('{{modelName}}/Edit', [
            '{{modelVariable}}' => ${{modelVariable}},
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{modelName}}Request $request, {{modelName}} ${{modelVariable}}): RedirectResponse
    {
        $this->{{modelVariable}}Service->update(${{modelVariable}}->id, $request->validated());

        return redirect()->route('{{routeName}}.index')
            ->with('message', '{{modelName}} updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelName}} ${{modelVariable}}): RedirectResponse
    {
        $this->{{modelVariable}}Service->delete(${{modelVariable}}->id);

        return redirect()->route('{{routeName}}.index')
            ->with('message', '{{modelName}} deleted successfully.');
    }
}
